# add panels and groups
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
cbind(stratum_data, PANEL = p, group = 1:nrow(stratum_data))
}))
} else {
# collapse version
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
p_data <- subset(data, PANEL == p)
do.call(rbind, lapply(1:length(axis_ind), function(i) {
agg <- aggregate(x = p_data$freq, by = p_data[axis_ind[i]],
FUN = sum)
names(agg) <- c("label", "freq")
cbind(pos = i, agg, cumfreq = cumsum(agg$freq), PANEL = p)
}))
}))
# add group
res_data$group <- 1:nrow(res_data)
}
res_data
},
compute_group = function(data, scales) {
rownames(data) <- NULL
rect_data <- data.frame(x = data$pos,
y = (data$cumfreq - data$freq / 2))
data.frame(data, rect_data)
#box_data <- data.frame(
#    x = (data$pos + axis_width / 2 * c(-1, 1))[c(1, 1, 2, 2)],
#    y = (data$cumfreq - data$freq * c(1, 0))[c(1, 2, 2, 1)]
#)
#data.frame(data, box_data)
}
)
stat_stratum <- function(mapping = NULL, data = NULL, geom = "stratum",
na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatStratum, data = data, mapping = mapping, geom = geom,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomStratum <- ggproto(
"GeomStratum", GeomRect,
required_aes = c("freq"),
default_aes = aes(size = .5, linetype = 1,
colour = "black", fill = "white", alpha = 1),
setup_data = function(data, params,
axis_width = 1/3) {
transform(data,
xmin = x - axis_width / 2, xmax = x + axis_width / 2,
ymin = y - freq / 2, ymax = y + freq / 2)
},
draw_group = function(data, panel_scales, coord) {
# reproducing Wickham's GeomBar hack
ggproto_parent(GeomRect, self)$draw_panel(data, panel_scales, coord)
#coords <- coord$transform(data, panel_scales)
#grid::polygonGrob(
#    x = coords$x, y = coords$y,
#    gp = grid::gpar(
#        col = coords$colour, fill = coords$fill, alpha = coords$alpha,
#        lty = coords$linetype, lwd = coords$size * .pt
#    )
#)
},
draw_key = draw_key_polygon
)
geom_stratum <- function(mapping = NULL, data = NULL, stat = "stratum",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(
geom = GeomStratum, mapping = mapping, data = data, stat = stat,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes, params = list(na.rm = na.rm, ...)
)
}
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium() +
geom_text(stat = "stratum")
#' Alluvial diagram
StatAlluvium <- ggproto(
"StatAlluvium", Stat,
# frequency
required_aes = c("freq"),
# add axis-specific y0 and y1 params
setup_data = function(self, data, params) {
# aggregate freq over axes and panels
data <- aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data, FUN = sum
)
# identify axes (in numerical order)
axis_ind <- grep("^axis[0-9\\.]*$", names(data))
axis_ind <- axis_ind[order(as.numeric(gsub("^axis", "",
names(data)[axis_ind])))]
# vertical floors at each axis, by panel
# (might want to parametrize the option to "hide" rather than "collapse"
# but not sure if anyone would ever use the former option)
if (FALSE) {
# hide version
alluvium_data <- as.data.frame(
do.call(rbind, lapply(1:length(axis_ind), function(i) {
# order axis indices
axis_seq <- axis_ind[zigzag(n = length(axis_ind), i = i)]
# order ribbons according to axes, in above order
ribbon_seq <- do.call(order, data[axis_seq])
# ribbon increments along axis
incrs <- c(0, cumsum(data$freq[ribbon_seq]))
# ribbon breaks in original order (omits last)
cbind(i, incrs[order(ribbon_seq)])
}))
)
# axis column name
names(alluvium_data) <- c("pos", "y0")
# combine with original data
res_data <- data.frame(data, alluvium_data)
} else {
# collapse version
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
p_data <- subset(data, PANEL == p)
rownames(p_data) <- NULL
p_all <- do.call(rbind, lapply(1:length(axis_ind), function(i) {
# order axis indices
axis_seq <- axis_ind[zigzag(n = length(axis_ind), i = i)]
# order ribbons according to axes, in above order
ribbon_seq <- do.call(order, p_data[axis_seq])
# ribbon increments along axis
incrs <- c(0, cumsum(p_data$freq[ribbon_seq]))
# ribbon breaks in original order (omits last)
cbind(i, incrs[order(ribbon_seq)])
}))
# axis column name
colnames(p_all) <- c("pos", "y0")
# combine with original data
data.frame(p_data, p_all)
}))
}
print(res_data)
res_data
},
# calculate coordinates governing ribbon segments
compute_group = function(data, scales, params,
# axes to be placed at positive integers
axis_width = 1/3, ribbon_bend = 1/6) {
first_row <- data[1, setdiff(names(data), c("pos", "y0")),
drop = FALSE]
rownames(first_row) <- NULL
# spline coordinates (one axis)
if (nrow(data) == 1) {
spline_data <- data.frame(
x = data$pos + axis_width / 2 * c(-1, 1, 1, -1),
y = data$y0 + first_row$freq * c(0, 0, 1, 1),
shape = rep(0, 4)
)
return(data.frame(first_row, spline_data))
}
# spline coordinates (more than one axis)
x_oneway <- rep(data$pos, c(3, rep(4, nrow(data) - 2), 3)) +
axis_width / 2 * c(-1, rep(c(1, 1, -1, -1), nrow(data) - 1), 1) +
ribbon_bend * c(0, rep(c(0, 1, -1, 0), nrow(data) - 1), 0)
y_oneway <- rep(data$y0, c(3, rep(4, nrow(data) - 2), 3))
shape_oneway <- c(0, rep(c(0, 1, 1, 0), nrow(data) - 1), 0)
spline_data <- data.frame(
x = c(x_oneway, rev(x_oneway)),
y = c(y_oneway, rev(y_oneway) + first_row$freq),
shape = rep(shape_oneway, 2)
)
data.frame(first_row, spline_data)
}
)
stat_alluvium <- function(mapping = NULL, data = NULL, geom = "alluvium",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatAlluvium, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomAlluvium <- ggproto(
"GeomAlluvium", Geom,
required_aes = c("freq"),
default_aes = aes(size = .5, linetype = 1,
colour = 0, fill = "gray", alpha = .5),
draw_group = function(data, panel_scales, coord) {
coords <- coord$transform(data, panel_scales)
grid::xsplineGrob(
x = coords$x, y = coords$y, shape = coords$shape,
open = FALSE,
gp = grid::gpar(
col = coords$colour, fill = coords$fill, alpha = coords$alpha,
lty = coords$linetype, lwd = coords$size * .pt
)
)
},
draw_key = draw_key_polygon
)
geom_alluvium <- function(mapping = NULL, data = NULL, stat = "alluvium",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(
geom = GeomAlluvium, mapping = mapping, data = data, stat = stat,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium() +
geom_text(stat = "stratum")
# combining flows and boxes and using facets
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() +
facet_wrap(~ Survived, scales = "free_y")
#' Alluvial diagram
StatAlluvium <- ggproto(
"StatAlluvium", Stat,
# frequency
required_aes = c("freq"),
# add axis-specific y0 and y1 params
setup_data = function(self, data, params) {
# aggregate freq over axes and panels
data <- aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data, FUN = sum
)
# identify axes (in numerical order)
axis_ind <- grep("^axis[0-9\\.]*$", names(data))
axis_ind <- axis_ind[order(as.numeric(gsub("^axis", "",
names(data)[axis_ind])))]
# vertical floors at each axis, by panel
# (might want to parametrize the option to "hide" rather than "collapse"
# but not sure if anyone would ever use the former option)
if (FALSE) {
# hide version
alluvium_data <- as.data.frame(
do.call(rbind, lapply(1:length(axis_ind), function(i) {
# order axis indices
axis_seq <- axis_ind[zigzag(n = length(axis_ind), i = i)]
# order ribbons according to axes, in above order
ribbon_seq <- do.call(order, data[axis_seq])
# ribbon increments along axis
incrs <- c(0, cumsum(data$freq[ribbon_seq]))
# ribbon breaks in original order (omits last)
cbind(i, incrs[order(ribbon_seq)])
}))
)
# axis column name
names(alluvium_data) <- c("pos", "y0")
# combine with original data
res_data <- data.frame(data, alluvium_data)
} else {
# collapse version
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
p_data <- subset(data, PANEL == p)
rownames(p_data) <- NULL
p_all <- do.call(rbind, lapply(1:length(axis_ind), function(i) {
# order axis indices
axis_seq <- axis_ind[zigzag(n = length(axis_ind), i = i)]
# order ribbons according to axes, in above order
ribbon_seq <- do.call(order, p_data[axis_seq])
# ribbon increments along axis
incrs <- c(0, cumsum(p_data$freq[ribbon_seq]))
# ribbon breaks in original order (omits last)
cbind(i, incrs[order(ribbon_seq)])
}))
# axis column name
colnames(p_all) <- c("pos", "y0")
# combine with original data
data.frame(p_data, p_all)
}))
}
res_data
},
# calculate coordinates governing ribbon segments
compute_group = function(data, scales, params,
# axes to be placed at positive integers
axis_width = 1/3, ribbon_bend = 1/6) {
first_row <- data[1, setdiff(names(data), c("pos", "y0")),
drop = FALSE]
rownames(first_row) <- NULL
# spline coordinates (one axis)
if (nrow(data) == 1) {
spline_data <- data.frame(
x = data$pos + axis_width / 2 * c(-1, 1, 1, -1),
y = data$y0 + first_row$freq * c(0, 0, 1, 1),
shape = rep(0, 4)
)
return(data.frame(first_row, spline_data))
}
# spline coordinates (more than one axis)
x_oneway <- rep(data$pos, c(3, rep(4, nrow(data) - 2), 3)) +
axis_width / 2 * c(-1, rep(c(1, 1, -1, -1), nrow(data) - 1), 1) +
ribbon_bend * c(0, rep(c(0, 1, -1, 0), nrow(data) - 1), 0)
y_oneway <- rep(data$y0, c(3, rep(4, nrow(data) - 2), 3))
shape_oneway <- c(0, rep(c(0, 1, 1, 0), nrow(data) - 1), 0)
spline_data <- data.frame(
x = c(x_oneway, rev(x_oneway)),
y = c(y_oneway, rev(y_oneway) + first_row$freq),
shape = rep(shape_oneway, 2)
)
data.frame(first_row, spline_data)
}
)
stat_alluvium <- function(mapping = NULL, data = NULL, geom = "alluvium",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatAlluvium, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomAlluvium <- ggproto(
"GeomAlluvium", Geom,
required_aes = c("freq"),
default_aes = aes(size = .5, linetype = 1,
colour = 0, fill = "gray", alpha = .5),
draw_group = function(data, panel_scales, coord) {
coords <- coord$transform(data, panel_scales)
grid::xsplineGrob(
x = coords$x, y = coords$y, shape = coords$shape,
open = FALSE,
gp = grid::gpar(
col = coords$colour, fill = coords$fill, alpha = coords$alpha,
lty = coords$linetype, lwd = coords$size * .pt
)
)
},
draw_key = draw_key_polygon
)
geom_alluvium <- function(mapping = NULL, data = NULL, stat = "alluvium",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(
geom = GeomAlluvium, mapping = mapping, data = data, stat = stat,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
# combining flows and boxes and using facets
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() +
facet_wrap(~ Survived, scales = "free_y")
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() + geom_text(stat = "stratum") +
facet_wrap(~ Survived, scales = "free_y")
GeomRect$draw_panel
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium() +
geom_text(stat = "stratum") +
ggtitle("Alluvial diagram of Titanic passenger data")
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium() +
geom_text(stat = "stratum") +
ggtitle("Alluvial diagram of Titanic passenger demographic data")
# use of aesthetics
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
scale_color_manual(values = c("black", "white"))
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
scale_color_manual(values = c("black", "white"))
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_text(stat = "stratum")
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data")
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived) +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
scale_color_manual(values = c("black", "white")) +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age*Sex, alpha = Class, color = Survived)) +
scale_color_manual(values = c("black", "white")) +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age:Sex, alpha = Class, color = Survived)) +
scale_color_manual(values = c("black", "white")) +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
# combining flows and boxes and using facets
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() +
facet_wrap(~ Survived, scales = "free_y")
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Survived)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() +
facet_wrap(~ Survived, scales = "free_y")
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Survived)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() + geom_text(stat = "stratum") +
facet_wrap(~ Survived, scales = "free_y")
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium(aes(fill = Age)) +
geom_stratum() + geom_text(stat = "stratum") +
facet_wrap(~ Survived, scales = "free_y")
is.array(Titanic)
is.numeric(Titanic)
as.data.frame(Titanic)
ggplot
library(ggplot)
library(ggplot2)
ggplot
library(devtools)
install_github("corybrunson/ggalluvial")
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
library(ggalluvial)
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()
setwd("~/Documents/edu/R/ggalluvial")
load_all()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
ggtitle("Titanic passenger demographic and survival data") +
theme_bw()

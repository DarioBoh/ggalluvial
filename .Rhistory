gp = grid::gpar(
col = coords$colour, fill = coords$fill, alpha = coords$alpha,
lty = coords$linetype, lwd = coords$size * .pt
)
)
},
draw_key = draw_key_polygon
)
geom_alluvium <- function(mapping = NULL, data = NULL, stat = "alluvium",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(
geom = GeomAlluvium, mapping = mapping, data = data, stat = stat,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' Variable axes and strata
#'
#' \code{stat_stratum} calculates the centers of the levels at each axis.
#' \code{geom_stratum} stacks a box for each level of a variable at its axis.
#'
#' @seealso \code{\link{geom_alluvium}} for inter-axis flows.
#'
StatStratum <- ggproto(
"StatStratum", Stat,
required_aes = c("freq"),
setup_data = function(data, params) {
# aggregate freq over axes
data <- aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data, FUN = sum
)
# identify axes (in numerical order)
axis_ind <- grep("^axis[0-9\\.]*$", names(data))
axis_ind <- axis_ind[order(as.numeric(gsub("^axis", "",
names(data)[axis_ind])))]
# stack axis-aggregated data with cumulative frequencies
# (might want to parametrize the option to "hide" rather than "collapse"
# but not sure if anyone would ever use the former option)
if (FALSE) {
# hide version
stratum_data <- do.call(rbind, lapply(1:length(axis_ind), function(i) {
agg <- aggregate(x = data$freq, by = data[axis_ind[i]], FUN = sum)
names(agg) <- c("label", "freq")
cbind(pos = i, agg, cumfreq = cumsum(agg$freq))
}))
# add panels and groups
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
cbind(stratum_data, PANEL = p, group = 1:nrow(stratum_data))
}))
} else {
# collapse version
res_data <- do.call(rbind, lapply(unique(data$PANEL), function(p) {
p_data <- subset(data, PANEL == p)
do.call(rbind, lapply(1:length(axis_ind), function(i) {
agg <- aggregate(x = p_data$freq, by = p_data[axis_ind[i]],
FUN = sum)
names(agg) <- c("label", "freq")
cbind(pos = i, agg, cumfreq = cumsum(agg$freq), PANEL = p)
}))
}))
# add group
res_data$group <- 1:nrow(res_data)
}
res_data
},
compute_group = function(data, scales) {
rownames(data) <- NULL
rect_data <- data.frame(x = data$pos,
y = (data$cumfreq - data$freq / 2))
data.frame(data, rect_data)
#box_data <- data.frame(
#    x = (data$pos + axis_width / 2 * c(-1, 1))[c(1, 1, 2, 2)],
#    y = (data$cumfreq - data$freq * c(1, 0))[c(1, 2, 2, 1)]
#)
#data.frame(data, box_data)
}
)
stat_stratum <- function(mapping = NULL, data = NULL, geom = "stratum",
na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatStratum, data = data, mapping = mapping, geom = geom,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomStratum <- ggproto(
"GeomStratum", GeomRect,
required_aes = c("freq"),
default_aes = aes(size = .5, linetype = 1,
colour = "black", fill = "white", alpha = 1),
setup_data = function(data, params,
axis_width = 1/3) {
transform(data,
xmin = x - axis_width / 2, xmax = x + axis_width / 2,
ymin = y - freq / 2, ymax = y + freq / 2)
},
draw_group = function(data, panel_scales, coord) {
# reproducing Wickham's GeomBar hack
ggproto_parent(GeomRect, self)$draw_panel(data, panel_scales, coord)
#coords <- coord$transform(data, panel_scales)
#grid::polygonGrob(
#    x = coords$x, y = coords$y,
#    gp = grid::gpar(
#        col = coords$colour, fill = coords$fill, alpha = coords$alpha,
#        lty = coords$linetype, lwd = coords$size * .pt
#    )
#)
},
draw_key = draw_key_polygon
)
geom_stratum <- function(mapping = NULL, data = NULL, stat = "stratum",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(
geom = GeomStratum, mapping = mapping, data = data, stat = stat,
position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes, params = list(na.rm = na.rm, ...)
)
}
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium()
# degeneracy (one axis)
ggplot(as.data.frame(Titanic), aes(freq = Freq, axis = Class)) +
geom_alluvium(aes(fill = Class, color = Survived)) +
scale_color_manual(values = c("black", "white"))
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis = Class, axis2 = Sex)) +
geom_alluvium()
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium()
?geom_point
?alluvial
alluvial
data <- as.data.frame(Titanic)
head(data)
freq="Freq"
axes=1:4
?melt.data.frame
library(reshape2)
?melt.data.frame
library(devtools)
load_all()
# basic flows (alluvia)
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium()
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
scale_color_manual(values = c("black", "white"))
# use of facets
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex)) +
facet_wrap(~ Survived, scales = "free_y")
# use of facets
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Age, alpha = Sex)) +
facet_wrap(~ Survived, scales = "free_y")
# use of groups (needs to be prohibited)
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, group = Survived)) +
geom_alluvium()
# degeneracy (one axis)
ggplot(as.data.frame(Titanic), aes(freq = Freq, axis = Class)) +
geom_alluvium(aes(fill = Class, color = Survived)) +
scale_color_manual(values = c("black", "white"))
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium(aes(fill = Age, alpha = Sex),
axis_width = 1/5, ribbon_bend = 1/3)
# control of axis positions (ridiculous syntax)
ggplot(as.data.frame(Titanic),
aes(freq = Freq,
axis1 = Class, axis1.5 = Age, axis2.5 = Sex, axis3 = Survived)) +
geom_alluvium(aes(fill = Age, alpha = Sex))
ggplot(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium() +
geom_text(stat = "stratum") +
ggtitle("Alluvial diagram of Titanic passenger demographic data")
library(ggalluvial)
ggalluvial(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) print(as.list(...))
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) print(as.list(substitute(list(...)))[-1L])
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) print(substitute(list(...)))
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
print(sapply(input_list, class))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
input_aes <- input_list[[which(sapply(input_list, class) == "uneval")]]
print(input_aes)
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
input_aes <- input_list[[which(sapply(input_list, class) == "uneval")]]
print(as.character(input_aes))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
input_aes <- input_list[[which(sapply(input_list, class) == "uneval")]]
print(names(input_aes))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
print(aes_input[grep("^axis[0-9\\.]$", names(aes_input))])
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
print(unname(axis_input))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
print(unname(as.character(axis_input)))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
test <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
print(as.numeric(gsub("^axis", "", names(axis_input))))
print(unname(as.character(axis_input)))
}
test(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
rm(test)
#' Quick alluvial diagram
#'
#' Produces an alluvial diagram with axis strata and labels.
#'
#' @seealso \code{\link{geom_alluvium}} and \code{\link{geom_stratum}}
#' @usage NULL
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
ggalluvial <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
ggalluvial(as.data.frame(Titanic),
aes(freq = Freq, axis1 = Class, axis2 = Sex, axis3 = Age,
fill = Survived))
data <- as.data.frame(Titanic)
head(data)
get_axes
data1 <- data
names(data1)
names(data1) <- c(paste0("axis", 1:4), "freq")
data1$PANEL=1
data1$group=1:32
dim(data1)
data2 <- data
names(data2)
data2 <- data2[, c(1:2, 5)]
data2
names(data2)
names(data2) <- c("x", "axis", "freq")
data2$PANEL=1
data2$group=data2$x:data2$axis
data2
data2$group=as.numeric(data2$x:data2$axis)
data2
data=data1
aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data,
FUN = sum
)
data = aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data,
FUN = sum
)
axis_ind <- get_axes(names(data))
#' Identify axis columns
#'
#' Identify elements in a character vector that fit the pattern of axis
#' aesthetic names, and return their indices in the numerical order of the axis
#' numbers.
#'
#' @param x character vector
get_axes <- function(x) {
axis_ind <- grep("^axis[0-9\\.]*$", x)
axis_ind[order(as.numeric(gsub("^axis", "", x[axis_ind])))]
}
axis_ind <- get_axes(names(data))
axis_ind
data=data2
data = aggregate(
formula = as.formula(paste("freq ~",
paste(setdiff(names(data), "freq"),
collapse = "+"))),
data = data,
FUN = sum
)
axis_ind <- get_axes(names(data))
axis_ind
names(data)
head(data)
data
reshape::dcast(data, x ~ axis)
reshape2::dcast(data, x ~ axis)
reshape2::dcast(data, axis ~ x)
?reshape2::dcast
reshape2::dcast(data, axis ~ x, value.var = "freq")
?mosaicplot
mosaicplot
library(ggalluvial)
ggalluvial(as.data.frame(Titanic),
aes(axis1 = Age, axis2 = Sex, axis3 = Class, weight = Freq))
ggalluvial(data = as.data.frame(Titanic),
formula = ~ Age + Sex + Class,
weight = "Freq")
# shortcut using formula interface with frequency array input and within-flow stratification
ggalluvial(data = Titanic,
formula = Survived ~ Age + Sex + Class,
weight = "Freq")
library(devtools)
check()
check()
install()
ggalluvial(data = Titanic, formula = Survived ~ Age + Sex + Class)
check()
install()
ggalluvial(data = Titanic, formula = Survived ~ Age + Sex + Class)
ggalluvial(as.data.frame(Titanic),
aes(axis1 = Age, axis2 = Sex, axis3 = Class, weight = Freq))
ggalluvial(data = as.data.frame(Titanic),
formula = ~ Age + Sex + Class,
weight = "Freq")
ggalluvial(data = Titanic, formula = Survived ~ Age + Sex + Class)
setwd("..")
library(ggalluvial)
png(height = 360, width = 600, file = "inst/fig/example-shortcut.png")
ggalluvial(Titanic, Survived ~ Age + Sex + Class)
dev.off()
check()
library(devtools)
check()
install()
ggalluvial(Titanic, Survived ~ Age + Sex + Class)
ggalluvial(Titanic, formula = Survived ~ Age + Sex + Class)
test <- function(...) is.call(list(...)[[1]])
test(5)
test(~ Age + Sex)
test(Survived ~ Age + Sex)
test <- function(...) any(sapply(input_list, is.call))
test(5)
test <- function(...) any(sapply(list(...), is.call))
test(5)
test(~ Age + Sex)
test(Survived ~ Age + Sex)
test(Survived ~ Age + Sex, 5)
test("Fred", Survived ~ Age + Sex, 5)
getwd()
library(devtools)
check()
#' Quick alluvial diagrams and formula interface
#'
#' Produces an alluvial diagram with flows, boxes, and labels, optionally based
#' on a formula in terms of the data elements
#'
#' @name ggalluvial
#' @seealso \code{\link{alluvium}} and \code{\link{stratum}}
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
#' @param formula a formula to specify the axes and alluvial divisions
#' @param data a data frame or frequency table
#' @param weight a weight variable, from \code{data} or of compatible length
#'   with the elements of \code{formula}
ggalluvial <- function(...) {
input_list <- list(...)
if (!is.null(input_list[["formula"]]) | any(sapply(input_list, is.call))) {
ggalluvial.formula(...)
} else {
ggalluvial.default(...)
}
}
#' @rdname ggalluvial
#' @export
ggalluvial.default <- function(...) {
input_list <- list(...)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
#' @rdname ggalluvial
#' @export
ggalluvial.formula <- function(formula, data = NULL, weight, ...) {
formula <- as.formula(formula)
if (!is.null(data)) {
if (!is.data.frame(data)) {
data <- as.data.frame(data)
if (!missing(weight)) {
warning("Using weights from table; 'weight' argument ignored")
}
weight <- "Freq"
}
}
dep_incl <- (length(formula) == 3)
if (dep_incl & length(all.vars(formula[[2]])) > 1) {
stop("Multilpe variables on LHS of '%s'")
}
luv_data <- model.frame(formula = formula, data = data)
if (!missing(weight)) {
if (is.character(weight)) {
luv_data[[weight]] <- data[[weight]]
} else {
luv_data$weight <- weight
}
}
formula_aes <- aes()
if (!missing(weight)) formula_aes[["weight"]] <-
if (is.character(weight)) as.name(weight) else as.name("weight")
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[[paste0("axis", i)]] <- as.name(formula_axes[i])
}
if (dep_incl) formula_aes[["fill"]] <- as.name(all.vars(formula[[2]]))
ggalluvial.default(luv_data, formula_aes, ...)
}
ggalluvial(Titanic, Survived ~ Age + Sex + Class)
ggalluvial(Survived ~ Age + Sex + Class, Titanic)
check()
check()
check()
test <- function(...) names(list(...))
test(5)
test(a = 5)
test(a = 5, 6)
test(7, a = 5, 6)
test(7, 6)
test(7, 6)[1]
test(7, a = 5, 6)[1]
is.null(test(7, a = 5, 6))
test(7, a = 5, 6)[1] == ""
check()
rm(list=ls())
library(ggalluvial)
ggalluvial(Survived ~ Class + Sex + Age, Titanic)

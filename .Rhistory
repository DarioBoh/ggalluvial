formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- formula_axes[i]
}
formula_aes
formula[[3]]
formula[[2]]
all.vars(formula[[2]])
as.character(formula[[2]])
as.character(formula[[3]])
all.vars(as.formula(x + y ~ z)[[2]])
stop("Multilpe variables on LHS of '%s'")
formula_aes
dep_incl
if (dep_incl) formula_aes["fill"] <- all.vars(formula[[2]])
dep_incl
formula_aes
#' Formula interface for alluvial diagrams
#'
#' Produces an alluvial diagram with flows, boxes, and labels based on a formula
#' in terms of the data elements
#'
#' @seealso \code{link{ggalluvial.axes}}
#' @usage NULL
#' @export
#' @param data a data frame
#' @param formula a formula to specify the axes and alluvial divisions
#' @param weight a weight variable, from \code{data} or of compatible length
#'   with the elements of \code{formula}
ggalluvial.formula <- function(formula, data = NULL, weight) {
dep_incl <- (length(formula) == 3)
if (dep_incl & length(all.vars(formula[[2]])) > 1) {
stop("Multilpe variables on LHS of '%s'")
}
luv_data <- model.frame(formula = formula, data = data)
if (!missing(weight)) {
if (is.character(weight)) {
luv_data[[weight]] <- data[[weight]]
} else {
luv_data$weight <- weight
}
}
formula_aes <- aes()
if (!missing(weight)) formula_aes["weight"] <-
if (is.character(weight)) weight else "weight"
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- formula_axes[i]
}
if (dep_incl) formula_aes["fill"] <- all.vars(formula[[2]])
ggalluvial(data = luv_data, aes = formula_aes)
}
# examples
#
# ggalluvial(formula = Survived ~ Age + Sex + Class,
#            data = as.data.frame(Titanic) or Titanic,
#            weight = Freq)
# is equivalent to
# ggplot(data = as.data.frame(Titanic),
#        aes(axis1 = Age, axis2 = Sex, axis3 = Class,
#            fill = Survived, weight = Freq)) +
#   geom_alluvium() + geom_stratum() + geom_text(stat = "stratum")
ggalluvial.formula
ggalluvial.formula(formula = Survived ~ Age + Sex + Class, data = as.data.frame(Titanic), weight = "Freq")
test <- Survived ~ Age + Sex + Class
test
is.formula(test)
length(test)
test[1]
test[[2]]
test[[3]]
data=as.data.frame(Titanic)
weight="Freq"
formula <- as.formula(formula)
dep_incl <- (length(formula) == 3)
if (dep_incl & length(all.vars(formula[[2]])) > 1) {
stop("Multilpe variables on LHS of '%s'")
}
luv_data <- model.frame(formula = formula, data = data)
if (is.character(weight)) {
luv_data[[weight]] <- data[[weight]]
} else {
luv_data$weight <- weight
}
formula_aes <- aes()
formula_aes["weight"] <-
if (is.character(weight)) weight else "weight"
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- formula_axes[i]
}
if (dep_incl) formula_aes["fill"] <- all.vars(formula[[2]])
ggalluvial(data = luv_data, aes = formula_aes)
head(luv_data)
formula_aes
library(ggalluvial)
ggplot(as.data.frame(Titanic),
aes(weight = Freq,
axis1 = Class, axis2 = Sex, axis3 = Age, axis4 = Survived)) +
geom_alluvium(aes(fill = Age, alpha = Sex, color = Survived)) +
scale_color_manual(values = c("black", "white"))
ggplot(as.data.frame(Titanic),
aes(weight = Freq, axis1 = Class, axis2 = Sex)) +
geom_alluvium()
ggplot(as.data.frame(UCBAdmissions),
aes(weight = Freq, axis1 = Gender, axis2 = Dept)) +
geom_alluvium(aes(fill = Admit)) +
geom_stratum() + geom_text(stat = "stratum")
ggplot(as.data.frame(UCBAdmissions),
aes(weight = Freq, axis1 = Gender, axis2 = Dept, fill = Admit)) +
geom_alluvium() +
geom_stratum() + geom_text(stat = "stratum")
ggalluvial(data=as.data.frame(UCBAdmissions), aes(weight = Freq, axis1 = Gender, axis2 = Dept, fill = Admit))
head(luv_data)
formula_aes
ggalluvial(data = luv_data, aes = formula_aes)
ggalluvial(data = luv_data, aes = aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(data = as.data.frame(Titanic), aes = aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(as.data.frame(Titanic), aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(luv_data, formula_aes)
ggalluvial(data = as.data.frame(Titanic), aes = aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(as.data.frame(Titanic), aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(luv_dat, aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(luv_data, aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived))
ggalluvial(luv_data, formula_aes)
formula_aes == aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived)
aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived)
formula_aes
test <- aes(weight = Freq, axis1 = Age, axis2 = Sex, axis3 = Class, fill = Survived)
test[1]
as.vector(test)
names(test)
unname(test)
as.call(formula_aes)
is.call(test)
mode(test)
test[[1]]
mode(test[[1]])
as.name("Freq")
formula_aes <- aes()
if (!missing(weight)) formula_aes["weight"] <-
if (is.character(weight)) as.name(weight) else as.name("weight")
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- as.name(formula_axes[i])
}
if (dep_incl) formula_aes["fill"] <- as.name(all.vars(formula[[2]]))
formula_aes <- aes()
if (!missing(weight)) formula_aes["weight"] <-
if (is.character(weight)) weight else "weight"
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- formula_axes[i]
}
if (dep_incl) formula_aes["fill"] <- all.vars(formula[[2]])
is.list(formula_aes)
formula_aes[1]
formula_aes[1] <- as.name("Freq")
formula_aes
formula_aes <- aes()
if (!missing(weight)) formula_aes["weight"] <-
if (is.character(weight)) weight else "weight"
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[paste0("axis", i)] <- formula_axes[i]
}
if (dep_incl) formula_aes["fill"] <- all.vars(formula[[2]])
test
formula_aes
mode(test[[1]])
mode(formula_aes[[1]])
sapply(test, mode)
as.name
?as.name
is.name(test[[1]])
is.name(formula_aes[[1]])
as.name(formula_aes[[1]])
test2 <- aes()
test2["weight"] <- as.name("Freq")
test2
test2[["weight"]] <- as.name("Freq")
test2
formula_aes <- aes()
if (!missing(weight)) formula_aes[["weight"]] <-
if (is.character(weight)) as.name(weight) else as.name("weight")
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[[paste0("axis", i)]] <- as.name(formula_axes[i])
}
if (dep_incl) formula_aes[["fill"]] <- as.name(all.vars(formula[[2]]))
formula_aes
ggalluvial(luv_data, formula_aes)
#' Formula interface for alluvial diagrams
#'
#' Produces an alluvial diagram with flows, boxes, and labels based on a formula
#' in terms of the data elements
#'
#' @seealso \code{link{ggalluvial.axes}}
#' @usage NULL
#' @export
#' @param data a data frame
#' @param formula a formula to specify the axes and alluvial divisions
#' @param weight a weight variable, from \code{data} or of compatible length
#'   with the elements of \code{formula}
ggalluvial.formula <- function(formula, data = NULL, weight) {
formula <- as.formula(formula)
dep_incl <- (length(formula) == 3)
if (dep_incl & length(all.vars(formula[[2]])) > 1) {
stop("Multilpe variables on LHS of '%s'")
}
luv_data <- model.frame(formula = formula, data = data)
if (!missing(weight)) {
if (is.character(weight)) {
luv_data[[weight]] <- data[[weight]]
} else {
luv_data$weight <- weight
}
}
formula_aes <- aes()
if (!missing(weight)) formula_aes[["weight"]] <-
if (is.character(weight)) as.name(weight) else as.name("weight")
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[[paste0("axis", i)]] <- as.name(formula_axes[i])
}
if (dep_incl) formula_aes[["fill"]] <- as.name(all.vars(formula[[2]]))
ggalluvial(luv_data, formula_aes)
}
# examples
#
# ggalluvial(formula = Survived ~ Age + Sex + Class,
#            data = as.data.frame(Titanic) or Titanic,
#            weight = "Freq")
# is equivalent to
# ggplot(data = as.data.frame(Titanic),
#        aes(axis1 = Age, axis2 = Sex, axis3 = Class,
#            fill = Survived, weight = Freq)) +
#   geom_alluvium() + geom_stratum() + geom_text(stat = "stratum")
ggalluvial.formula(data=as.data.frame(Titanic),Survived ~ Age + Sex)
ggalluvial.formula(data=as.data.frame(Titanic),Survived ~ Age + Sex, weight = Freq)
ggalluvial.formula(data=as.data.frame(Titanic),Survived ~ Age + Sex, weight = "Freq")
mode(Titanic)
is.data.frame(Titanic)
#' Formula interface for alluvial diagrams
#'
#' Produces an alluvial diagram with flows, boxes, and labels based on a formula
#' in terms of the data elements
#'
#' @seealso \code{link{ggalluvial.axes}}
#' @usage NULL
#' @export
#' @param data a data frame
#' @param formula a formula to specify the axes and alluvial divisions
#' @param weight a weight variable, from \code{data} or of compatible length
#'   with the elements of \code{formula}
ggalluvial.formula <- function(formula, data = NULL, weight) {
formula <- as.formula(formula)
if (!is.null(data)) {
if (!is.data.frame(data)) data <- as.data.frame(data)
}
dep_incl <- (length(formula) == 3)
if (dep_incl & length(all.vars(formula[[2]])) > 1) {
stop("Multilpe variables on LHS of '%s'")
}
luv_data <- model.frame(formula = formula, data = data)
if (!missing(weight)) {
if (is.character(weight)) {
luv_data[[weight]] <- data[[weight]]
} else {
luv_data$weight <- weight
}
}
formula_aes <- aes()
if (!missing(weight)) formula_aes[["weight"]] <-
if (is.character(weight)) as.name(weight) else as.name("weight")
formula_axes <- all.vars(formula[[2 + dep_incl]])
for (i in 1:length(formula_axes)) {
formula_aes[[paste0("axis", i)]] <- as.name(formula_axes[i])
}
if (dep_incl) formula_aes[["fill"]] <- as.name(all.vars(formula[[2]]))
ggalluvial(luv_data, formula_aes)
}
ggalluvial.formula(data=Titanic,Survived ~ Age + Sex, weight = "Freq")
#' Quick alluvial diagram
#'
#' Produces an alluvial diagram with axis strata and labels.
#'
#' @seealso \code{\link{alluvium}} and \code{\link{stratum}}
#' @usage NULL
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
ggalluvial <- function(...) {
input_list <- list(...)
print(input_list)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
ggalluvial(luv_data, formula_aes)
#' Quick alluvial diagram
#'
#' Produces an alluvial diagram with axis strata and labels.
#'
#' @seealso \code{\link{alluvium}} and \code{\link{stratum}}
#' @usage NULL
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
ggalluvial <- function(...) {
input_list <- list(...)
print(sapply(input_list, is.formula))
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
ggalluvial(luv_data, formula_aes)
#' Quick alluvial diagram
#'
#' Produces an alluvial diagram with axis strata and labels.
#'
#' @seealso \code{\link{alluvium}} and \code{\link{stratum}}
#' @usage NULL
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
ggalluvial <- function(...) {
input_list <- list(...)
print(sapply(input_list, is.call))
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
ggalluvial(luv_data, formula_aes)
??formula
nlme::splitFormula
inherits(Titanic, "formula")
#' Quick alluvial diagram
#'
#' Produces an alluvial diagram with axis strata and labels.
#'
#' @seealso \code{\link{alluvium}} and \code{\link{stratum}}
#' @usage NULL
#' @export
#' @param ... arguments passed to \code{ggplot} and inherited by
#'   \code{geom_alluvium} and \code{geom_stratum}.
ggalluvial <- function(...) {
input_list <- list(...)
print(input_list)
aes_input <- input_list[[which(sapply(input_list, class) == "uneval")]]
axis_input <- aes_input[grep("^axis[0-9\\.]$", names(aes_input))]
axis_breaks <- as.numeric(gsub("^axis", "", names(axis_input)))
axis_labels <- unname(as.character(axis_input))
ggplot(...) +
geom_alluvium() +
geom_stratum() +
geom_text(stat = "stratum") +
scale_x_continuous(breaks = axis_breaks, labels = axis_labels)
}
ggalluvial(data = luv_data, formula_aes)
getwd()
install()
check()
check()
install()
library(ggalluvial)
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived))
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
library(devtools)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
rm(ggalluvial)
ls()
rm(ggalluvial.formula)
rm(list=ls())
library(ggalluvial)
ggalluvial(Survived ~ Age + Sex, data = Titanic)
check()
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
inherits(~ Age + Sex, "formula")
inherits(as.formula(~ Age + Sex), "formula")
test <- function(...) {
input_list <- list(...)
inherits(input_list[[1]], "formula")
}
test(~ Age + Sex)
test(~ Age + Sex, data = Titanic)
test(Survived ~ Age + Sex, data = Titanic)
ggalluvial(Survived ~ Age + Sex, data = Titanic)
test <- function(...) {
input_list <- list(...)
mode(input_list[[1]])
}
test(~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
test <- function(...) {
input_list <- list(...)
print(sapply(input_list, mode))
use_formula <- ("formula" %in% names(input_list)) |
(inherits(input_list[[1]], "formula") |
(mode(input_list[[1]]) == "call" &
input_list[[1]][[1]] == as.name("~")))
use_formula
}
test(Survived ~ Age + Sex, data = Titanic)
test <- function(...) {
input_list <- list(...)
use_formula <- ("formula" %in% names(input_list)) |
(inherits(input_list[[1]], "formula") |
(mode(input_list[[1]]) == "call" &
input_list[[1]][[1]] == as.name("~")))
use_formula
}
test(Survived ~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic)
ggalluvial(Survived ~ Age + Sex, data = Titanic, weight = "Freq")
load_all()
load_all()
check()
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic, weight = "Freq")
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic, weight = "Freq")
load_all()
ggalluvial(Survived ~ Age + Sex, data = Titanic, weight = "Freq")
check()
install()
ggalluvial(Survived ~ Age + Sex, data = Titanic, weight = "Freq")
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
ggplot(data=as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq)) + geom_alluvium()
?plyr::rename
check()
install()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
check()
install()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,freq=Freq))
check()
install()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,freq=Freq))
ggplot(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,freq=Freq)) + geom_alluvium()
ggplot(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq)) + geom_alluvium()
check()
install()
ggplot(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq)) + geom_alluvium()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
check()
install()
ggplot(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq)) + geom_alluvium()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
check()
install()
ggplot(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq)) + geom_alluvium()
ggalluvial(as.data.frame(Titanic),aes(axis1=Sex,axis2=Age,fill=Survived,weight=Freq))
ggalluvial(Survived ~ Age + Sex,as.data.frame(Titanic))
is.list(as.formula(Survived ~ Age + Sex))
is.list(Survived ~ Age + Sex)
length(Survived ~ Age + Sex)
mosaicplot
mosaicplot.default
?mosaicplot
mosaicplot.formula
??mosaicplot
methods(mosaicplot)
check()
install()
